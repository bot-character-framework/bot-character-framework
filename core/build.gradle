plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

dependencies {
    // jackson
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    compile 'com.intellij:annotations'
    //
    compile "org.apache.commons:commons-collections4"
    testCompile "junit:junit"
    testCompile "org.hamcrest:hamcrest-all"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
//        license {
//            name "MIT"
//            distribution "repo"
//            url "https://opensource.org/licenses/mit-license.php"
//        }
    }
    developers {
        developer {
            id "corvis"
            name "Dmitry Berezovsky"
            email "corvis.mail@gmail.com"
        }
    }

    scm {
        url "https://github.com/corvis/bot-character-framework"
    }
}
// Create the pom configuration:

// Create the publication with the pom configuration:
publishing {
    publications {
        FrameworkCorePublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId rootProject.name.toLowerCase() + "-" + project.name
            version project.version.toString()

            pom.withXml {
                def root = asNode()
                root.appendNode('description', rootProject.description)
                root.appendNode('name', project.name)
                root.appendNode('url', 'https://github.com/bot-character-framework/bot-character-framework')
                root.children().last() + pomConfig
            }
        }
    }
}

Properties properties = new Properties()
def secretsFile = rootProject.file('local.properties')
if (secretsFile.exists()) {
    properties.load(new FileInputStream(secretsFile))
} else if (System.getenv('BINTRAY_USER') != null && System.getenv('BINTRAY_APIKEY') != null) {
    properties.setProperty('bintray.user', System.getenv('BINTRAY_USER'))
    properties.setProperty('bintray.apikey', System.getenv('BINTRAY_APIKEY'))
    if (System.getenv('BINTRAY_GPG_PASSWORD') != null) {
        properties.setProperty('bintray.gpg.password', System.getenv('BINTRAY_GPG_PASSWORD'))
    }
}

bintray {
    user = properties.getProperty('bintray.user')
    key = properties.getProperty('bintray.apikey')
    publications = ['FrameworkCorePublication']
    override = true
    pkg {
        repo = 'maven'
        name = 'bot-character-framework'
        publish = true
        version {
            name = project.version.toString()
        }
    }
}